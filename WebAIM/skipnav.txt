https://webaim.org/techniques/skipnav/

skip to main content

"Skip Navigation" Links
「スキップナビ」リンク

You are here: Home > Articles > "Skip Navigation" Links
現在地: ホーム > 記事 > 「スキップナビ」リンク

Article Contents
記事の内容

    Overview
    概要

    Creating "Skip Navigation" Links
    「スキップナビ」リンクの作成

    Browser Quirks
    ブラウザーの癖

    Multiple "Skip" Links
    複数の「スキップ」リンク

    Alternatives to "Skip Navigation" Links
    「スキップナビ」リンクの代替 





Overview
概要

The main content is not usually the first thing on a web page. Keyboard and screen reader users generally must navigate a long list of navigation links, sub-lists of links, corporate icons, site searches, and other elements before ever arriving at the main content. This is particularly difficult for users with some forms of motor disabilities.
通常、メイン コンテンツはウェブページの最初のものではありません。 キーボードとスクリーン リーダーのユーザーは、通常、メイン コンテンツに到達する前に、ナビゲーション リンクの長いリスト、リンクのサブリスト、企業アイコン、サイト検索、およびその他の要素をナビゲートする必要があります。 これは、ある種の運動障害を持つユーザーにとって特に困難です。

Without some sort of system for bypassing the long list of links, some users are at a huge disadvantage. Consider users with no arm movement, who use computers by tapping their heads on a switch or that use a stick in their mouth to press keyboard keys. Requiring users to perform any action perhaps 100s of times before reaching the main content is simply unacceptable.
リンクの長いリストをバイパスするための何らかのシステムがなければ、一部のユーザーは非常に不利な立場に置かれます。 腕が動かないユーザーで、頭をスイッチに当ててコンピューターを使用するユーザーや、棒を口にくわえてキーボードのキーを押すユーザーを考えてみましょう。 メイン コンテンツに到達するまでに、おそらく何百回ものアクションを実行することをユーザーに要求することは、単純に受け入れられません。

Of course, sighted people who use their mouse do not have any trouble with pages such as this. They can almost immediately scan over the page and identify where the main content is. In effect, sighted users have a built-in "skip navigation" mechanism: their eyes. They can also bypass the many links before the main content and click directly on the link they want with the mouse. The "skip navigation" idea was invented to give screen reader and keyboard users the same capability of going directly to the main content that sighted mouse users take for granted.
もちろん、マウスを使っている目の見える人は、このようなページでも問題ありません。 彼らは、ほとんどすぐにページをスキャンして、メイン コンテンツの場所を特定できます。 つまり、目の見えるユーザーは、目という「スキップナビ (skip navigation、ナビゲーションをスキップ) 」の仕組みを内蔵しているのです。 また、メイン コンテンツの前にある多くのリンクをバイパスして、必要なリンクをマウスで直接クリックすることもできます。 「スキップナビ」というアイデアは、スクリーン リーダーのユーザーとキーボードのユーザーが、目の見えるマウスのユーザーが当たり前のように使っているメイン コンテンツに直接移動するのと同じ機能を提供するために考案されました。





Creating "Skip Navigation" Links
「スキップナビ」リンクの作成

The idea is simple enough: provide a link at the top of the page which jumps the user down to an anchor or target at the beginning of the main content. For the most part, it really is this easy, though there is more than one way to accomplish the goal. Some techniques are better than others. The techniques discussed here are:
アイデアは非常に単純です。 ページの上部に、メイン コンテンツの先頭にあるアンカーまたはターゲットにユーザーをジャンプさせるリンクを提供します。 目標を達成する方法は複数ありますが、ほとんどの場合、これは本当に簡単です。 一部のテクニックは他のテクニックよりも優れています。 ここで説明するテクニックは次のとおりです。

    Providing visible links at the top of the page
    ページの上部に目に見えるリンクを提供する

    Providing visible links elsewhere on the page
    ページ上の他の場所に目に見えるリンクを提供する

    Making the link invisible
    リンクを目に見えなくする

    Making the link invisible until it receives keyboard focus
    キーボード フォーカスを受け取るまでリンクを目に見えなくする 





Visible links at the top of the page
ページ上部の目に見えるリンク

The easiest method of creating a "skip navigation" link is to put it at the top of the page in regular text. Put the corresponding anchor (link destination) at the beginning of the main content.
「スキップナビ」リンクを作成する最も簡単な方法は、通常のテキストでページの上部に配置することです。 対応するアンカー (リンク先) をメインコンテンツの先頭に置きます。

The horizontal location of the link doesn't matter much. The link can be on the left side, the middle, the right, or in some location in between. The key is to make sure the link is one of the first items that screen readers hear and that keyboard users tab to. Otherwise, users may not realize there is a "skip navigation" link there at all, and may waste time trying to muddle through the extraneous links. Screen reader users especially may get impatient if they don't hear the "skip navigation" link very early in the page.
リンクの水平方向の位置はあまり重要ではありません。 リンクは、左側、中央、右側、またはその間のどこかに配置できます。 重要なのは、リンクがスクリーン リーダーで最初に聞こえ、キーボードのユーザーがタブで移動する項目の 1 つであることを確認することです。 そうしないと、ユーザーはそこに「スキップナビ」リンクがあることにまったく気付かない可能性があり、無関係なリンクをなんとかしようとして時間を無駄にする可能性があります。 スクリーン リーダーのユーザーは、ページの早い段階で「スキップナビ」リンクが聞こえないと、特にイライラする可能性があります。

To be optimally usable, the link must also be visually apparent. A very small or hidden link does not benefit the audience that most needs "skip" links - sighted keyboard users.
最適な使用感を得るためには、リンクが視覚的に明らかである必要もあります。 非常に小さいリンクや非表示のリンクは、「スキップ」リンクを最も必要としているオーディエンス、つまり目の見えるキーボードのユーザーにはメリットがありません。

The verdict: This method works and is highly accessible. A disadvantage of this approach is that the link may be intrusive to visual design - it must be visible and at the very beginning of the page. Also, the link is presented to all users, even sighted mouse users who may not use it, or that could potentially be confused by it.
評決: この方法は機能し、非常にアクセスしやすいです。 このアプローチの欠点は、リンクが視覚的なデザインの邪魔になる可能性があることです - リンクはページの最初に表示されている必要があります。 また、リンクはすべてのユーザーに表示されます。 これには、リンクを使用しない、またはリンクに混乱する可能性のある目の見えるマウスのユーザーも含まれます。


Example
例

The link is the first item in the page. The anchor or target for the link (where the link will jump the user to) is placed at the beginning of the main content.
リンクはページの最初の項目です。 リンクのアンカーまたはターゲット (リンクがユーザーをジャンプさせる場所) は、メイン コンテンツの先頭に配置します。 


<body>

<a href="#maincontent">Skip to main content</a>
<a href="#maincontent">メインコンテンツへスキップ</a>

...

<main id="maincontent">

<h1>Heading</h1>
<h1>見出し</h1>

<p>This is the first paragraph</p>
<p>これは最初のパラグラフです</p>


The target is identified by its id attribute value matching the href value (minus the "#") of the "skip" link.
ターゲットは、「スキップ」リンクの href 値 (「#」を除いたもの) に一致する id 属性値によって識別されます。

Alternatively, you can use a named anchor to identify the target for the link, though named anchors are no longer conforming in HTML5.
代わりに、名前付きアンカーを使用してリンクのターゲットを識別することもできますが、名前付きアンカーは HTML5 に準拠しなくなりました。 


<h1><a name="maincontent" id="maincontent"></a> Heading</h1>
<h1><a name="maincontent" id="maincontent"></a> 見出し</h1>

<p>This is the first paragraph</p>
<p>これは最初のパラグラフです</p>





Invisible links
目に見えないリンク

Many developers worry about the aesthetic impact of "skip navigation" links. They may think these links don't look particularly attractive, they "ruin" the layout, or that they get in the way of artistic expression. It's easy to argue that the links may be confusing for users that do not need them. While a visible "skip" link declares a type of distinct commitment to accessibility, to address these concerns, the link can be visually hidden.
多くの開発者は、「スキップナビ」リンクの美的影響を懸念しています。 彼らは、これらのリンクが特に魅力的に見えなかったり、レイアウトを「台無しに」したり、芸術的表現の邪魔になると考えるかもしれません。 リンクを必要としないユーザーにとって、リンクが混乱を招く可能性があると主張するのは簡単です。 目に見える「スキップ」リンクは、アクセシビリティへの明確なコミットメントの一種であることを宣言しますが、これらの懸念に対処するために、リンクを視覚的に隠すことができます。

There are a few methods for doing this, but it's vital that the link still be usable by all keyboard users, particularly sighted keyboard users. This means that the link should be hidden visually by default, but that it should become visible when it receives keyboard focus. Some techniques, such as hiding the content permanently with CSS, making the link the same color as the background, sizing the link to 0 pixels, or placing it on a one pixel transparent image do not meet these important requirements.
これを行うにはいくつかの方法がありますが、すべてのキーボードのユーザー、特に目が見えるキーボードのユーザーがリンクを引き続き使用できることが重要です。 これは、リンクがデフォルトで視覚的に隠されている必要があることを意味しますが、キーボード フォーカスを受け取ったときに目に見えるようにする必要があります。 コンテンツを CSS で永久に非表示にする、リンクを背景と同じ色にする、リンクのサイズを 0 ピクセルに設定する、1 ピクセルの透明な画像に配置するなどのテクニックは、これらの重要な要件を満たしていません。

Probably the most accessible method for visually hiding skip links is to hide them off screen, then cause them to be positioned on screen when they receive keyboard focus.
スキップ リンクを視覚的に隠すための最もアクセスしやすい方法は、おそらく、スキップ リンクを画面外に隠しておき、キーボード フォーカスを受け取ったときに画面上に配置することです。 


Important
重要

Review the article on Invisible Content Just for Screen Reader Users for details on using CSS to hide "skip" links off-screen.
CSS を使用して「スキップ」リンクを画面外に隠す方法の詳細については、「スクリーン リーダーのユーザーのためだけの目に見えないコンテンツ」に関する記事を確認してください。 
https://webaim.org/techniques/css/invisiblecontent/
https://raw.githubusercontent.com/Wind1808/Translated-into-Japanese/main/WebAIM/invisiblecontent.txt


One potential issue with this approach is that if the user navigates very quickly using the Tab key, the link may be visible on the page for only a fraction of a second and may be overlooked. This can be partially addressed by ensuring that the "skip" link is visually distinctive at the top of the page. Additionally, one could use scripting of (optimally) CSS3 transitions to cause the link to animate so it remains visible on screen for a period of time.
このアプローチの潜在的な問題の 1 つは、ユーザーが Tab キーを使用してとても早くナビゲートすると、リンクがページに表示されるのはほんの一瞬で、見落とされる可能性があることです。 これは、ページの上部にある「スキップ」リンクが視覚的に区別できるようにすることで、部分的に対処できます。 さらに、(最適には) CSS3 トランジションのスクリプトを使用して、リンクをアニメーション化して、一定期間画面に表示されたままにすることもできます。 


Note
注

You can see an example of a hidden skip link that becomes visible on keyboard focus, that also has CSS3 animation to make it visually distinctive and always visible on screen momentarily on this very page. Simply navigate through the links at the beginning of this page using the Tab key and watch for the "skip" link at the top left screen.
このページでは、キーボード フォーカスで目に見えるようになる隠されたスキップ リンクの例を見ることができます。 また、CSS3 アニメーションを使用して特徴を持たせ、常に瞬間的に画面に表示されるようにしています。 Tab キーを使用してこのページの先頭にあるリンクにナビゲートし、画面の左上にある「スキップ」リンクを確認してください。


The verdict: This method works well for nearly all users. Sighted mouse users (who do not benefit from the link) do not see it, screen reader users will hear the link, and sighted keyboard users will see the link when they navigate to it.
評決: この方法は、ほぼすべてのユーザーに適しています。 目の見えるマウスのユーザー (リンクの恩恵を受けない) にはリンクが表示されず、スクリーン リーダーのユーザーにはリンクが聞こえ、目の見えるキーボードのユーザーにはリンクにナビゲートしたときにリンクが見えます。





Which wording is best?
どの言葉遣いが良いですか?

There is more than one "best" way to word the link. Here are some fairly common examples:
リンクを表す「最良の」方法は複数あります。 かなり一般的な例を次に示します。

    Skip navigation
    ナビゲーションをスキップ

    Skip main navigation
    メインナビゲーションをスキップ

    Skip navigation links
    ナビゲーション リンクをスキップ

    Skip to main content
    メインコンテンツへスキップ

    Skip to content
    コンテンツへスキップ

None of these is inherently better than the others. In general, we prefer "Skip to main content" as it explains where they are navigating to versus what they are navigating past. Minor variations on these are probably acceptable, such as "skip top navigation." Don't get too creative here, or else users may not realize what the purpose of the link is.
これらのどれも他のものより本質的に優れているわけではありません。 一般的に、「メイン コンテンツへスキップ」は、ユーザーがどこへナビゲートしているのか、何を通り過ぎてナビゲートしようとしているのかを説明するものであるため、私達はこれを好みます。 「トップ ナビゲーションをスキップ」など、これらのマイナーなバリエーションはおそらく許容されます。 ここであまりクリエイティブにならないでください。 そうしないと、ユーザーがリンクの目的を理解できない可能性があります。 





Browser Quirks
ブラウザーの癖

"Skip navigation" links are such a simple concept that it's hard to believe there would be any browser quirks in implementing it, but there are. Some browsers do not fully support in-page links. While they may visually shift focus to the location of the target or named anchor for the "skip" link, they do not actually set keyboard focus to this location. These bugs can potentially be addressed by using JavaScript to set focus (using JavaScript focus()) to the target element.
「スキップナビ」リンクは非常に単純な概念なので、それを実装する際にブラウザーの癖があるとは信じがたいですが、実際にはあります。 一部のブラウザーは、ページ内リンクを完全にはサポートしていません。 「スキップ」リンクのターゲットまたは名前付きアンカーの場所に視覚的にフォーカスを移動できますが、実際にはキーボード フォーカスをこの場所に設定しません。 これらのバグは、JavaScript を使用して (JavaScript の focus() を使用して) ターゲット要素にフォーカスを設定することで解決できる可能性があります。 (訳注: Firefox では、設定の「ページ中の移動にカーソルを使用する (キャレットブラウズモード)(K)」で解決できます。)





Multiple "Skip" Links
複数の「スキップ」リンク

What if a page has multiple sections and/or multiple layers of navigational links? Should developers provide a "skip navigation" to each of these sections or over each layer or navigational links? In most cases, this is not necessary. Remember, the purpose of "skip navigation" links is to reduce the clutter of lists of links. Adding more links increases link-clutter.
ページに複数のセクションやナビゲーション リンクの複数のレイヤーがある場合はどうしますか?  開発者は、これらそれぞれのセクション、レイヤーまたはナビゲーション リンクに「スキップナビ」を提供する必要がありますか?  ほとんどの場合、これは必要ありません。 「スキップナビ」リンクの目的は、リンクのリストの煩雑さを減らすことであることを忘れないでください。 リンクを増やすと、リンクの乱雑さが増すことになります。

A popular U.S. government site recently had a total of nine different "skip navigation" links (the links are hidden using CSS):
人気のある米国政府のサイトには最近、次のような合計 9 つの異なる「スキップナビ」リンクがありました (リンクは CSS で隠されています)。

    Skip to content
    コンテンツへスキップ

    Skip to government search
    政府の検索へスキップ

    Skip to bottom nav
    一番下のナビゲーションにスキップ

    Skip to top nav bar-right aligned
    トップ ナビゲーション バーへスキップ - 右揃え

    Skip to By organization
    組織別へスキップ

    Skip to contact your government
    政府に連絡へスキップ

    Skip to reference center
    リファレンスセンターへスキップ

    Skip to information by topic
    トピック別情報へスキップ

    Skip to citizens: get it done online!
    市民へスキップ: オンラインで済ませましょう!

This brings of the question of whether they need a "Skip the skip links" link! By providing a proper document outline, perhaps using HTML5 section elements and ARIA landmarks, and simplifying page structure and navigation, typically one or two "skip" links is sufficient.
これは、「スキップ リンクをスキップする」リンクが必要かどうかという問題をもたらします。 おそらく HTML5 のセクション要素と ARIA のランドマークを使用して適切なドキュメントのアウトラインを提供し、ページ構造とナビゲーションを簡素化することにより、通常は 1 つか 2 つの「スキップ」リンクで十分です。

Skip links or other in-page links can also be used to allow users to jump to or jump over page content. For example, the Table of Contents at the top of this page includes in-page links to facilitate navigation to page areas. A "skip" link could also be used to allow the user to quickly bypass confusing or potentially inaccessible content, such as ASCII art, complex tables, etc.
スキップ リンクまたは他のページ内リンクを使用して、ユーザーがページ コンテンツにジャンプしたり、ページ コンテンツを飛び越えたりすることもできます。 たとえば、このページの上部にある目次には、ページ領域へのナビゲーションを容易にするページ内リンクが含まれています。 「スキップ」リンクを使用して、ASCII アートや複雑な表などのわかりにくいコンテンツやアクセスできない可能性のあるコンテンツをユーザーがすばやくバイパスできるようにすることもできます。





Alternatives to "Skip Navigation" Links
「スキップナビ」リンクの代替

The truth is that "skip navigation" links are a rather clumsy and obtrusive solution to a real world problem. They work. They're useful, but they're a bit of a hack. They will continue to be useful until a more standardized method of designating the difference between navigation and main content evolves and is fully supported. With ARIA landmarks and the HTML5 <main> element, this is closer to becoming a reality. Unfortunately, no browsers yet fully support keyboard navigation via these elements. Despite these limitations, there are other ways one can facilitate page navigation in addition to "skip" links.
真実は、「スキップナビ」リンクは、現実世界の問題に対するかなり不器用で目障りな解決策であるということです。 それらは働きます。 それらは便利ですが、ちょっとしたハックです。 ナビゲーションとメイン コンテンツの違いを指定するより標準化された方法が進化し、完全にサポートされるまで、これらは引き続き有用です。 ARIA のランドマークと HTML5 の <main> 要素を使用すると、これはより現実に近いものになります。 残念ながら、これらの要素を介したキーボード ナビゲーションを完全にサポートしているブラウザーはまだありません。 これらの制限にもかかわらず、「スキップ」リンクに加えて、ページ ナビゲーションを容易にする他の方法があります。 





Navigating by headings
見出しによる移動

The most useful alternative method is to create documents with proper headings so that users can skip from heading to heading. Most screen readers allow users to listen to a list of headings or to listen to each heading in sequence, skipping past the paragraphs, images, links, and other extraneous information. If documents are created properly, they can often form an outline of headings, which serves not only as a way to skip past the navigation but also lets screen reader users "scan" the main ideas of a document without having to read the whole thing. Defining your primary document heading at the beginning of your main content as an <h1> can provide very quick access to the beginning of the main content.
最も有用な代替方法は、ユーザーが見出しから見出しまでをスキップできるように、適切な見出しでドキュメントを作成することです。 ほとんどのスクリーン リーダーでは、ユーザーは見出しのリストを聞いたり、段落、画像、リンク、その他の無関係な情報をスキップして各見出しを順番に聞いたりできます。 ドキュメントが適切に作成されていれば、見出しのアウトラインを形成できることがよくあります。 これは、ナビゲーションをスキップする方法としてだけでなく、スクリーン リーダーのユーザーがドキュメント全体を読まなくても、ドキュメントの主要なアイデアを「スキャン」できるようにもします。 メイン コンテンツの先頭にある主要なドキュメントの見出しを <h1> として定義すると、メイン コンテンツの先頭にすばやくアクセスできます。

The one downside to this approach is that only screen reader users have access to this functionality. Browsers do not come with this feature. This means that sighted keyboard users cannot skip from link to link in the same way that screen reader users can.
このアプローチの 1 つの欠点は、スクリーン リーダーのユーザーのみがこの機能にアクセスできることです。 ブラウザーにはこの機能がありません。 これは、目の見えるキーボードのユーザーは、スクリーン リーダーのユーザーができるのと同じ方法でリンクからリンクにスキップできないことを意味します。

Verdict: This method is very effective for screen reader users, but sighted keyboard users generally cannot take advantage of it. Even so, there are many reasons to use headings, so this method is highly recommended.
評決: この方法はスクリーン リーダーのユーザーにとっては非常に効果的ですが、目の見えるキーボードのユーザーは通常、この方法を利用できません。 それでも、見出しを使用する理由はたくさんあるので、この方法を強くお勧めします。 





Alternate reading orders
代替の読み上げ順序

Some developers place the main content first in the reading order and the navigation last - generally using CSS to maintain the navigation first in the page visually. This method makes "skip navigation" links unnecessary, but it raises another question. Should such sites provide "skip to navigation" links? This is a tricky question. Links taking users to the navigation are unexpected, and can lead to some confusion. With or without "skip to navigation" links, screen reader users who want to access the navigation may get lost in the page, wondering if there is any navigation.
一部の開発者は、メイン コンテンツを読み上げ順序の最初に配置し、ナビゲーションを最後に配置します - 通常、CSS を使用してナビゲーションをページの最初に視覚的に維持します。 この方法により、「スキップナビ」リンクが不要になりますが、別の問題が発生します。 そのようなサイトは、「ナビゲーションへスキップ」リンクを提供するべきでしょうか?  これは難しい質問です。 ユーザーをナビゲーションに導くリンクは予期しないものであり、混乱を招く可能性があります。 「ナビゲーションへスキップ」リンクの有無にかかわらず、ナビゲーションにアクセスしたいスクリーン リーダーのユーザーは、ナビゲーションがあるかどうか疑問に思ってページ内で迷ってしまうかもしれません

This approach also causes a reading and navigation order that is very atypical - and that can be very confusing, particularly for sighted users who are visually tracking the navigation focus that seemingly jumps around the page rather than starting at the beginning.
このアプローチはまた、読み上げとナビゲーションの順序が非常に不規則なものになり、特に目の見えるユーザーにとっては、ページの最初から始まるのではなく、ページのあちこちを飛び回るようなナビゲーションのフォーカスを目で追うことになるため、とても混乱する可能性があります。

Verdict: The concept can be useful, but users can becomes disoriented with an atypical reading and navigation order.
評決: このコンセプトは役に立つかもしれませんが、ユーザーは不規則な読み上げとナビゲーションの順序で混乱する可能性があります。





Last updated: Oct 25, 2013
最終更新日: 2013 年 10 月 25 日








Translations
翻訳

    German
    ドイツ語

Related Resources
関連リソース

    Motor Disabilities
    運動障害

    Links and Hypertext
    リンクとハイパーテキスト

    CSS in Action: Invisible Content Just for Screen Reader Users
    CSS の活用: スクリーン リーダーのユーザーのためだけの目に見えないコンテンツ

    Creating Accessible JavaScript
    アクセシブルな JavaScript の作成

    Site Searches, Indexes, and Site Maps
    サイト検索、インデックス、サイト マップ 








©2021 WebAIM

Center for Persons with Disabilities
障害者センター

Utah State University
ユタ州立大学

6807 Old Main Hill
6807 オールド・メイン・ヒル

Logan, UT 84322-6807
ローガン、ユタ州 84322-6807 

435.797.7024

Check Your Accessibility

Web site address:

From the Blog

    Show Up to Disrupt

    WebAIM Million - 2021 Update

    Survey of Web Accessibility Practitioners #3 Results

    Accessibility of COVID-19 Vaccine Pages and Barriers to Individuals with Disabilities

Popular Resources

    WebAIM Training

    WCAG 2 Checklist

    WebAIM Monthly Newsletter

    Color Contrast Checker

    Web Accessibility for Designers

    WAVE Web Accessibility Evaluation Tool

    Contact About RSS Feeds Twitter Copyright & Terms of Use 


