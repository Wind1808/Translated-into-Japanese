https://hacks.mozilla.org/mdn-web-docs-evolves-lowdown-on-the-upcoming-new-platform/

MDN Web Docs evolves! Lowdown on the upcoming new platform
MDN Web Docs が進化します！今後の新しいプラットフォームの詳細

By Chris Mills

Posted on October 29, 2020 in MDN
2020年10月29日に MDN で投稿されました

The time has come for Kuma — the platform that powers MDN Web Docs — to evolve. For quite some time now, the MDN developer team has been planning a radical platform change, and we are ready to start sharing the details of it. The question on your lips might be “What does a evolve into? A KumaMaMa?”
MDN Web Docs を強化するプラットフォームである Kuma が進化する時が来ました。 かなり長い間、MDN 開発者チームは根本的なプラットフォームの変更を計画しており、その詳細を共有する準備ができています。 あなたの唇の質問は、「Kuma は何に進化するのか？ KumaMaMa？」





What? Kuma is evolving!
何？ Kuma は進化しています！

For those of you not so into Pokémon, the question might instead be “How exactly is MDN changing, and how does it affect MDN users and contributors”?
ポケモンにあまり興味がない人にとっては、代わりに「MDN はどの程度正確に変化し、MDN ユーザーと寄稿者にどのように影響するか」という質問があります。

For general users, the answer is easy — there will be very little change to how we serve the great content you use everyday to learn and do your jobs.
一般ユーザーの場合、答えは簡単です。 日常的に使用して仕事を学び、実行する優れたコンテンツの提供方法にほとんど変更はありません。

For contributors, the answer is a bit more complex.
寄稿者にとって、答えはもう少し複雑です。




The changes in a nutshell
一言で言えば変化

In short, we are updating the platform to move the content from a MySQL database to being hosted in a GitHub repository (codename: Project Yari).
つまり、プラットフォームを更新して、コンテンツを MySQL データベースから GitHub リポジトリ（コードネーム：Project Yari）でホストされるように移動します。

Congratulations! Your Kuma evolved into Yari
おめでとう！ あなたの Kuma は Yari に進化しました

The main advantages of this approach are:
このアプローチの主な利点は次のとおりです。

    Less developer maintenance burden: The existing (Kuma) platform is complex and hard to maintain. Adding new features is very difficult. The update will vastly simplify the platform code — we estimate that we can remove a significant chunk of the existing codebase, meaning easier maintenance and contributions.
    開発者のメンテナンス負担が少ない：既存の（Kuma）プラットフォームは複雑で、メンテナンスが困難です。新しい機能を追加することは非常に困難です。 この更新により、プラットフォームコードが大幅に簡素化されます。 既存のコードベースのかなりの部分を削除できると推定されます。 つまり、メンテナンスと貢献が容易になります。

    Better contribution workflow: We will be using GitHub’s contribution tools and features, essentially moving MDN from a Wiki model to a pull request (PR) model. This is so much better for contribution, allowing for intelligent linting, mass edits, and inclusion of MDN docs in whatever workflows you want to add it to (you can edit MDN source files directly in your favorite code editor).
    より優れたコントリビューションワークフロー：GitHub のコントリビューションツールと機能を使用し、基本的に MDN を Wiki モデルからプルリクエスト（PR）モデルに移行します。 これは貢献にとって非常に優れており、インテリジェントなリンティング、一括編集、および追加するワークフローに MDN ドキュメントを含めることができます（MDN ソースファイルはお気に入りのコードエディターで直接編集できます）。

    Better community building: At the moment, MDN content edits are published instantly, and then reverted if they are not suitable. This is really bad for community relations. With a PR model, we can review edits and provide feedback, actually having conversations with contributors, building relationships with them, and helping them learn.
    コミュニティ構築の改善：現時点では、MDN コンテンツの編集は即座に公開され、適切でない場合は元に戻されます。 これはコミュニティとの関係にとって本当に悪いことです。 PR モデルを使用すると、編集内容を確認してフィードバックを提供し、実際に寄稿者と会話し、寄稿者との関係を構築し、寄稿者の学習を支援することができます。

    Improved front-end architecture: The existing MDN platform has a number of front-end inconsistencies and accessibility issues, which we’ve wanted to tackle for some time. The move to a new, simplified platform gives us a perfect opportunity to fix such issues.
    改善されたフロントエンドアーキテクチャ：既存の MDN プラットフォームには、フロントエンドの不整合とアクセシビリティの問題がいくつかあります。 これらは、しばらくの間取り組みたいと考えていました。 新しい簡素化されたプラットフォームへの移行は、そのような問題を修正する絶好の機会を与えてくれます。

The exact form of the platform is yet to be finalized, and we want to involve you, the community, in helping to provide ideas and test the new contribution workflow! We will have a beta version of the new platform ready for testing on November 2, and the first release will happen on December 14.
プラットフォームの正確な形式はまだ完成していません。 アイデアの提供と新しい貢献ワークフローのテストを支援するために、コミュニティであるあなたを巻き込みたいと思います。 新しいプラットフォームのベータ版は11月2日にテストできるようになり、最初のリリースは12月14日に行われます。




Simplified back-end platform
簡素化されたバックエンドプラットフォーム

We are replacing the current MDN Wiki platform with a JAMStack approach, which publishes the content managed in a GitHub repo. This has a number of advantages over the existing Wiki platform, and is something we’ve been considering for a number of years.
現在の MDN Wiki プラットフォームを、GitHub リポジトリで管理されているコンテンツを公開する JAMStack アプローチに置き換えます。 これには、既存の Wiki プラットフォームに比べて多くの利点があり、私たちが長年検討してきたことです。

Before we discuss our new approach, let’s review the Wiki model so we can better understand the changes we’re making.
新しいアプローチについて説明する前に、Wiki モデルを確認して、行っている変更をよりよく理解できるようにします。




Current MDN Wiki platform
現在の MDN Wiki プラットフォーム

workflow diagram of the old kuma platform
古い kuma プラットフォームのワークフロー図

It’s important to note that both content contributors (writers) and content viewers (readers) are served via the same architecture. That architecture has to accommodate both use cases, even though more than 99% of our traffic comprises document page requests from readers. Currently, when a document page is requested, the latest version of the document is read from our MySQL database, rendered into its final HTML form, and returned to the user via the CDN.
コンテンツの寄稿者（ライター）とコンテンツの閲覧者（リーダー）の両方が同じアーキテクチャを介して提供されることに注意することが重要です。 トラフィックの 99% 以上がリーダーからのドキュメントページ要求で構成されている場合でも、そのアーキテクチャは両方のユースケースに対応する必要があります。 現在、ドキュメントページがリクエストされると、ドキュメントの最新バージョンが MySQL データベースから読み取られ、最終的な HTML フォームにレンダリングされ、CDN を介してユーザーに返されます。

That document page is stored and served from the CDN’s cache for the next 5 minutes, so subsequent requests — as long as they’re within that 5-minute window — will be served directly by the CDN. That caching period of 5 minutes is kept deliberately short, mainly due to the fact that we need to accommodate the needs of the writers. If we only had to accommodate the needs of the readers, we could significantly increase the caching period and serve our document pages more quickly, while at the same time reducing the workload on our backend servers.
そのドキュメントページは、次の5分間 CDN のキャッシュに保存されて提供されるため、後続のリクエストは、その5分のウィンドウ内にある限り、CDN によって直接提供されます。 5分のキャッシュ期間は、主にライターのニーズに対応する必要があるという事実のために、意図的に短く保たれています。 リーダーのニーズに対応するだけでよい場合は、キャッシュ期間を大幅に延長し、ドキュメントページをより迅速に提供すると同時に、バックエンドサーバーのワークロードを削減できます。

You’ll also notice that because MDN is a Wiki platform, we’re responsible for managing all of the content, and tasks like storing document revisions, displaying the revision history of a document, displaying differences between revisions, and so on. Currently, the MDN development team maintains a large chunk of code devoted to just these kinds of tasks.
また、MDN は Wiki プラットフォームであるため、すべてのコンテンツと、ドキュメントリビジョンの保存、ドキュメントのリビジョン履歴の表示、リビジョン間の違いの表示などのタスクを管理する責任があることにも気付くでしょう。 現在、MDN 開発チームは、これらの種類のタスク専用のコードの大部分を維持しています。




New MDN platform
新しい MDN プラットフォーム

workflow diagram of the new yari platform
新しい yari プラットフォームのワークフロー図

With the new JAMStack approach, the writers are served separately from the readers. The writers manage the document content via a GitHub repository and pull request model, while the readers are served document pages more quickly and efficiently via pre-rendered document pages served from S3 via a CDN (which will have a much longer caching period). The document content from our GitHub repository will be rendered and deployed to S3 on a daily basis.
新しい JAMStack アプローチでは、ライターはリーダーとは別に提供されます。 ライターは GitHub リポジトリとプルリクエストモデルを介してドキュメントコンテンツを管理し、リーダーは CDN を介して S3 から提供される事前にレンダリングされたドキュメントページを介してより迅速かつ効率的にドキュメントページを提供されます（キャッシュ期間ははるかに長くなります）。 GitHub リポジトリのドキュメントコンテンツは、毎日レンダリングされ、S3 にデプロイされます。

You’ll notice, from the diagram above, that even with this new approach, we still have a Kubernetes cluster with Django-based services relying on a relational database. The important thing to remember is that this part of the system is no longer involved with the document content. Its scope has been dramatically reduced, and it now exists solely to provide APIs related to user accounts (e.g. login) and search.
上の図から、この新しいアプローチを使用しても、リレーショナルデータベースに依存する Django ベースのサービスを備えた Kubernetes クラスターが残っていることがわかります。覚えておくべき重要なことは、システムのこの部分がドキュメントのコンテンツに関与しなくなったことです。 その範囲は劇的に縮小され、現在はユーザーアカウント（ログインなど）と検索に関連する API を提供するためだけに存在しています。

This separation of concerns has multiple benefits, the most important three of which are as follows:
この関心の分離には複数の利点があり、そのうち最も重要な3つは次のとおりです。

    First, the document pages are served to readers in the simplest, quickest, and most efficient way possible. That’s really important, because 99% of MDN’s traffic is for readers, and worldwide performance is fundamental to the user experience.
    まず、ドキュメントページは、可能な限り最も簡単、迅速、かつ最も効率的な方法で読者に提供されます。 MDN のトラフィックの 99% は読者向けであり、世界中のパフォーマンスがユーザーエクスペリエンスの基本であるため、これは非常に重要です。

    Second, because we’re using GitHub to manage our document content, we can take advantage of the world-class functionality that GitHub has to offer as a content management system, and we no longer have to support the large body of code related to our current Wiki platform. It can simply be deleted.
    次に、GitHub を使用してドキュメントコンテンツを管理しているため、GitHub がコンテンツ管理システムとして提供するワールドクラスの機能を利用でき、現在の Wiki プラットフォームに関連する大量のコードをサポートする必要がなくなります。 それは簡単に削除できます。

    Third, and maybe less obvious, is that this new approach brings more power to the platform. We can, for example, perform automated linting and testing on each content pull request, which allows us to better control quality and security.
    第三に、そしておそらくあまり明白ではないが、この新しいアプローチはプラットフォームにより多くの力をもたらすということです。 たとえば、コンテンツのプルリクエストごとに自動リンティングとテストを実行できます。 これにより、品質とセキュリティをより適切に制御できます。





New contribution workflow
新しい投稿ワークフロー

Because MDN content is soon to be contained in a GitHub repo, the contribution workflow will change significantly. You will no longer be able to click Edit on a page, make and save a change, and have it show up nearly immediately on the page. You’ll also no longer be able to do your edits in a WYSIWYG editor.
MDN コンテンツはまもなく GitHub リポジトリに含まれるため、投稿ワークフローは大幅に変更されます。 ページで[編集]をクリックしたり、変更を加えて保存したり、ページにすぐに表示したりすることはできなくなります。 また、WYSIWYG エディターで編集を行うこともできなくなります。

Instead, you’ll need to use git/GitHub tooling to make changes, submit pull requests, then wait for changes to be merged, the new build to be deployed, etc. For very simple changes such as fixing typos or adding new paragraphs, this may seem like a step back — Kuma is certainly convenient for such edits, and for non-developer contributors.
代わりに、git/GitHub ツールを使用して変更を加え、プルリクエストを送信し、変更がマージされるのを待ち、新しいビルドがデプロイされるのを待つ必要があります。 タイプミスの修正や新しい段落の追加などの非常に単純な変更の場合は、これは一歩後退したように見えるかもしれません — Kuma は、そのような編集や開発者以外の貢献者にとって確かに便利です。

However, making a simple change is arguably no more complex with Yari. You can use the GitHub UI’s edit feature to directly edit a source file and then submit a PR, meaning that you don’t have to be a git genius to contribute simple fixes.
ただし、単純な変更を加えることは、間違いなく Yari にとってこれ以上複雑ではありません。 GitHub UI の編集機能を使用して、ソースファイルを直接編集してから、PR を送信できます。つまり、簡単な修正を提供するために git の天才である必要はありません。

For more complex changes, you’ll need to use the git CLI tool, or a GUI tool like GitHub Desktop, but then again git is such a ubiquitous tool in the web industry that it is safe to say that if you are interested in editing MDN, you will probably need to know git to some degree for your career or course. You could use this as a good opportunity to learn git if you don’t know it already! On top of that there is a file system structure to learn, and some new tools/commands to get used to, but nothing terribly complex.
より複雑な変更を行うには、git CLI ツールまたは GitHub Desktop などの GUI ツールを使用する必要がありますが、git はWeb業界で広く普及しているツールであるため、MDN の編集に興味がある場合は、このツールと言っても過言ではありません。 あなたはおそらくあなたのキャリアやコースのためにある程度 git を知る必要があるでしょう。 まだ知らない場合は、これを git を学ぶ良い機会として利用できます。 その上、学ぶべきファイルシステム構造と、慣れるためのいくつかの新しいツール/コマンドがありますが、それほど複雑なものはありません。

Another possible challenge to mention is that you won’t have a WYSIWYG to instantly see what the page looks like as you add your content, and in addition you’ll be editing raw HTML, at least initially (we are talking about converting the content to markdown eventually, but that is a bit of a ways off). Again, this sounds like a step backwards, but we are providing a tool inside the repo so that you can locally build and preview the finished page to make sure it looks right before you submit your pull request.
もう1つの考えられる課題は、コンテンツを追加するとページがどのように表示されるかを即座に確認できる WYSIWYG がないことです。 さらに、少なくとも最初は生の HTML を編集することになります（最終的にコンテンツをマークダウンに変換することについて話し合っていますが、それは少し先のことです）。 繰り返しになりますが、これは一歩後退したように聞こえますが、プルリクエストを送信する直前に完成したページをローカルでビルドしてプレビューし、外観を確認できるように、リポジトリ内にツールを提供しています。

Looking at the advantages now, consider that making MDN content available as a GitHub repo is a very powerful thing. We no longer have spam content live on the site, with us then having to revert the changes after the fact. You are also free to edit MDN content in whatever way suits you best — your favorite IDE or code editor — and you can add MDN documentation into your preferred toolchain (and write your own tools to edit your MDN editing experience). A lot of engineers have told us in the past that they’d be much happier to contribute to MDN documentation if they were able to submit pull requests, and not have to use a WYSIWYG!
ここでの利点を見て、MDN コンテンツを GitHub リポジトリとして利用できるようにすることは非常に強力なことだと考えてください。 サイトにスパムコンテンツが存在しなくなったため、事後に変更を元に戻す必要があります。 また、MDN コンテンツを自分に最も適した方法（お気に入りの IDE またはコードエディター）で自由に編集できます。 また、MDN ドキュメントを好みのツールチェーンに追加できます（MDN 編集エクスペリエンスを編集するための独自のツールを作成できます）。 過去に多くのエンジニアが、プルリクエストを送信でき、WYSIWYG を使用する必要がなければ、MDN ドキュメントに貢献したほうがはるかに幸せだと言っていました。

We are also looking into a powerful toolset that will allow us to enhance the reviewing process, for example as part of a CI process — automatically detecting and closing spam PRs, and as mentioned earlier on, linting pages once they’ve been edited, and delivering feedback to editors.
また、たとえば CI プロセスの一部としてレビュープロセスを強化できる強力なツールセットも検討しています。 スパム PR を自動的に検出して閉じ、前述のように、編集後にページをリントし、編集者にフィードバックを提供します。

Having MDN in a GitHub repo also offers much easier mass edits; blanket content changes have previously been very difficult.
GitHub リポジトリに MDN を含めると、一括編集もはるかに簡単になります。 包括的コンテンツの変更は、以前は非常に困難でした。

Finally, the “time to live” should be acceptable — we are aiming to have a quick turnaround on the reviews, and the deployment process will be repeated every 24 hours. We think that your changes should be live on the site in 48 hours as a worst case scenario.
最後に、「存続時間」は許容範囲内である必要があります。 レビューの迅速なターンアラウンドを目指しており、展開プロセスは24時間ごとに繰り返されます。 最悪のシナリオとして、変更は48時間以内にサイトに公開されるはずです。




Better community building
より良いコミュニティ構築

Currently MDN is not a very lively place in terms of its community. We have a fairly active learning forum where people ask beginner coding questions and seek help with assessments, but there is not really an active place where MDN staff and volunteers get together regularly to discuss documentation needs and contributions.
現在、MDN はコミュニティの観点からはあまり活気のある場所ではありません。 コーディングの初心者に質問したり、評価の支援を求めたりするかなり活発な学習フォーラムがありますが、MDN のスタッフとボランティアが定期的に集まってドキュメントのニーズや貢献について話し合う活発な場所は実際にはありません。

Part of this is down to our contribution model. When you edit an MDN page, either your contribution is accepted and you don’t hear anything, or your contribution is reverted and you … don’t hear anything. You’ll only know either way by looking to see if your edit sticks, is counter-edited, or is reverted.
これの一部は、私たちの貢献モデルにあります。 MDN ページを編集すると、投稿が受け入れられて何も聞こえないか、投稿が元に戻されて…何も聞こえなくなります。 どちらの方法でも、編集が固定されているか、逆編集されているか、元に戻されているかを確認することによってのみわかります。

This doesn’t strike us as very friendly, and I think you’ll probably agree. When we move to a git PR model, the MDN community will be able to provide hands-on assistance in helping people to get their contributions right — offering assistance as we review their PRs (and offering automated help too, as mentioned previously) — and also thanking people for their help.
これは私たちをそれほど友好的とは思わないでしょう、そしてあなたはおそらく同意すると思います。 git PR モデルに移行すると、MDN コミュニティは、人々が貢献を正しく行うのを支援する実践的な支援を提供できるようになります。 PR を確認する際に支援を提供します（前述のように、自動化された支援も提供します）。 また、人々の助けに感謝します。

It’ll also be much easier for contributors to show how many contributions they’ve made, and we’ll be adding in-page links to allow people to file an issue on a specific page or even go straight to the source on GitHub and fix it themselves, if a problem is encountered.
また、投稿者が投稿した数を表示するのもはるかに簡単になります。 また、ページ内リンクを追加して、特定のページで問題を報告したり、GitHub のソースに直接アクセスしたりできるようにします。 問題が発生した場合は、自分で修正してください。

In terms of finding a good place to chat about MDN content, you can join the discussion on the MDN Web Docs chat room on Matrix.
MDN コンテンツについてチャットするのに適した場所を見つけるという点では、Matrix の MDN Web Docs チャットルームのディスカッションに参加できます。




Improved front-end architecture
改善されたフロントエンドアーキテクチャ

The old Kuma architecture has a number of front-end issues. Historically we have lacked a well-defined system that clearly describes the constraints we need to work within, and what our site features look like, and this has led to us ending up with a bloated, difficult to maintain front-end code base. Working on our current HTML and CSS is like being on a roller coaster with no guard-rails.
古い Kuma アーキテクチャには、多くのフロントエンドの問題があります。 歴史的に、作業に必要な制約とサイトの機能がどのように見えるかを明確に説明する明確なシステムが不足していたため、フロントエンドのコードベースを維持するのが困難で肥大化してしまいました。 現在の HTML と CSS での作業は、ガードレールのないジェットコースターにいるようなものです。

To be clear, this is not the fault of any one person, or any specific period in the life of the MDN project. There are many little things that have been left to fester, multiply, and rot over time.
明確にするために、これは1人の責任ではなく、MDN プロジェクトの存続期間中の特定の期間でもありません。 時間が経つにつれて、悩まされ、増殖し、腐敗するために残された多くの小さなことがあります。

Among the most significant problems are:
最も重要な問題には次のものがあります。

    Accessibility: There are a number of accessibility problems with the existing architecture that really should be sorted out, but were difficult to get a handle on because of Kuma’s complexity.
    アクセシビリティ：既存のアーキテクチャには、実際に解決する必要のあるアクセシビリティの問題がいくつかありますが、Kuma の複雑さのために、対処するのは困難でした。

    Component inconsistency: Kuma doesn’t use a proper design system — similar items are implemented in different ways across the site, so implementing features is more difficult than it needs to be.
    コンポーネントの不整合：Kuma は適切な設計システムを使用していません。 同様のアイテムがサイト全体でさまざまな方法で実装されているため、機能の実装は必要以上に困難です。

When we started to move forward with the back-end platform rewrite, it felt like the perfect time to again propose the idea of a design system. After many conversations leading to an acceptable compromise being reached, our design system — MDN Fiori — was born.
バックエンドプラットフォームの書き直しを進め始めたとき、デザインシステムのアイデアを再び提案する絶好の機会のように感じました。 許容できる妥協点に到達するまでの多くの会話の後、私たちの設計システムである MDN Fiori が誕生しました。

Front-end developer Schalk Neethling and UX designer Mustafa Al-Qinneh took a whirlwind tour through the core of MDN’s reference docs to identify components and document all the inconsistencies we are dealing with. As part of this work, we also looked for areas where we can improve the user experience, and introduce consistency through making small changes to some core underlying aspects of the overall design.
フロントエンド開発者の Schalk Neethling と UX デザイナーの Mustafa Al-Qinneh は、MDN のリファレンスドキュメントのコアを駆け巡り、コンポーネントを特定し、対処しているすべての不整合を文書化しました。 この作業の一環として、ユーザーエクスペリエンスを向上させ、全体的な設計の基本的な側面に小さな変更を加えることで一貫性を導入できる領域も探しました。

This included a defined color palette, simple, clean typography based on a well-defined type scale, consistent spacing, improved support for mobile and tablet devices, and many other small tweaks. This was never meant to be a redesign of MDN, so we had to be careful not to change too much. Instead, we played to our existing strengths and made rogue styles and markup consistent with the overall project.
これには、定義されたカラーパレット、明確に定義されたタイプスケールに基づくシンプルでクリーンなタイポグラフィ、一貫した間隔、モバイルデバイスとタブレットデバイスのサポートの改善、およびその他の多くの小さな調整が含まれていました。 これは MDN の再設計を意図したものではなかったため、あまり変更しないように注意する必要がありました。 代わりに、既存の強みを活かして、プロジェクト全体と一致する不正なスタイルとマークアップを作成しました。

Besides the visual consistency and general user experience aspects, our underlying codebase needed some serious love and attention — we decided on a complete rethink. Early on in the process it became clear that we needed a base library that was small, nimble, and minimal. Something uniquely MDN, but that could be reused wherever the core aspects of the MDN brand was needed. For this purpose we created MDN-Minimalist, a small set of core atoms that power the base styling of MDN, in a progressively enhanced manner, taking advantage of the beautiful new layout systems we have access to on the web today.
視覚的な一貫性と一般的なユーザーエクスペリエンスの側面に加えて、基盤となるコードベースには深刻な愛情と注意が必要でした。 完全に再考することにしました。 プロセスの早い段階で、小さく、機敏で、最小限のベースライブラリが必要であることが明らかになりました。 MDN 独自の何かですが、MDN ブランドのコアな側面が必要な場所ならどこでも再利用できます。 この目的のために、MDN の基本スタイリングを強化するコアアトムの小さなセットである MDN-Minimalist を作成しました。 これは、今日Webでアクセスできる美しい新しいレイアウトシステムを利用して、段階的に強化されています。

Each component that is built into Yari is styled with MDN-Minimalist, and also has its own style sheet that lives right alongside to apply further styles only when needed. This is an evolving process as we constantly rethink how to provide a great user experience while staying as close to the web platform as possible. The reason for this is two fold:
Yari に組み込まれている各コンポーネントは、MDN-Minimalist でスタイル設定されており、必要な場合にのみさらにスタイルを適用するためにすぐに使用できる独自のスタイルシートもあります。 これは進化するプロセスであり、Webプラットフォームに可能な限り近づきながら、優れたユーザーエクスペリエンスを提供する方法を常に再考しています。 この理由は2つあります。

    First, it means less code. It means less reinventing of the wheel. It means a faster, leaner, less bandwidth-hungry MDN for our end users.
    まず、コードが少ないことを意味します。 それは、車輪の再発明が少ないことを意味します。 これは、エンドユーザーにとって、より速く、よりスリムで、帯域幅をあまり必要としない MDN を意味します。

    Second, it helps address some of the accessibility issues we have begrudgingly been living with for some time, which are simply not acceptable on a modern web site. One of Mozilla’s accessibility experts, Marco Zehe, has given us a lot of input to help overcome these. We won’t fix everything in our first iteration, but our pledge to all of our users is that we will keep improving and we welcome your feedback on areas where we can improve further.
    第二に、それは私たちがしばらくの間しぶしぶ生きてきたアクセシビリティの問題のいくつかに対処するのに役立ちます。 それは現代のウェブサイトでは単に受け入れられません。 Mozilla のアクセシビリティの専門家の1人である Marco Zehe は、これらを克服するのに役立つ多くの情報を提供してくれました。 最初のイテレーションですべてを修正するわけではありませんが、すべてのユーザーへの誓約は、改善を続けることであり、さらに改善できる領域についてのフィードバックを歓迎します。

A wise person once said that the best way to ensure something is done right is to make doing the right thing the easy thing to do. As such, along with all of the work already mentioned, we are documenting our front-end codebase, design system, and pattern library in Storybook (see Storybook files inside the yari repo) with companion design work in Figma (see typography example) to ensure there is an easy, public reference for anyone who wishes to contribute to MDN from a code or design perspective. This in itself is a large project that will evolve over time. More communication about its evolution will follow.
賢い人はかつて、何かが正しく行われることを保証する最善の方法は、正しいことを簡単に行うことであると言いました。 そのため、すでに述べたすべての作業に加えて、フロントエンドのコードベース、デザインシステム、およびパターンライブラリを Storybook（yari リポジトリ内の Storybook ファイルを参照）に文書化し、Figma のコンパニオンデザイン作業（タイポグラフィの例を参照）をコードまたは設計の観点から MDN に貢献したい人のために、簡単で公開されたリファレンスがあることを確認してください。 これ自体は、時間の経過とともに進化する大規模なプロジェクトです。 その進化についてのより多くのコミュニケーションが続きます。




The future of MDN localization
MDN ローカリゼーションの未来

One important part of MDN’s content that we have talked about a lot during the planning phase is the localized content. As you probably already know, MDN offers facilities for translating the original English content and making the localizations available alongside it.
計画段階で多く話し合った MDN のコンテンツの重要な部分の1つは、ローカライズされたコンテンツです。 ご存知かもしれませんが、MDN には、元の英語のコンテンツを翻訳し、ローカリゼーションを一緒に利用できるようにする機能があります。

This is good in principle, but the current system has many flaws. When an English page is moved, the localizations all have to be moved separately, so pages and their localizations quite often go out of sync and get in a mess. And a bigger problem is that there is no easy way of signalling that the English version has changed to all the localizers.
これは原則としては良いのですが、現在のシステムには多くの欠陥があります。 英語のページを移動するときは、ローカリゼーションをすべて個別に移動する必要があるため、ページとそのローカリゼーションが同期しなくなり、混乱することがよくあります。 そして、より大きな問題は、英語版がすべてのローカライザーに変更されたことを通知する簡単な方法がないことです。

General management is probably the most significant problem. You often get a wave of enthusiasm for a locale, and lots of translations done. But then after a number of months interest wanes, and no-one is left to keep the translations up to date. The localized content becomes outdated, which is often harmful to learning, becomes a maintenance time-suck, and as a result, is often considered worse than having no localizations at all.
一般的な管理はおそらく最も重要な問題です。 多くの場合、ロケールに対する熱意の波が発生し、多くの翻訳が行われます。 しかし、その後数か月後に関心が薄れ、翻訳を最新の状態に保つために誰も残されません。 ローカライズされたコンテンツは古くなり、学習に悪影響を与えることが多く、メンテナンスに時間がかかります。 その結果、ローカリゼーションがまったくない場合よりも悪いと見なされることがよくあります。

Note that we are not saying this is true of all locales on MDN, and we are not trying to downplay the amount of work volunteers have put into creating localized content. For that, we are eternally grateful. But the fact remains that we can’t carry on like this.
これが MDN のすべてのロケールに当てはまるとは限らず、ボランティアがローカライズされたコンテンツの作成に費やした作業量を軽視しようとはしていないことに注意してください。 そのために、私たちは永遠に感謝しています。 しかし、私たちがこのように続けることができないという事実は残っています。

We did a bunch of research, and talked to a lot of non-native-English speaking web developers about what would be useful to them. Two interesting conclusions were made:
私たちはたくさんの調査を行い、英語を母国語としない多くのWeb開発者に、彼らにとって何が役立つかについて話しました。 2つの興味深い結論が出されました。

    We stand to experience a significant but manageable loss of users if we remove or reduce our localization support. 8 languages cover 90% of the accept-language headers received from MDN users (en, zh, es, ja, fr, ru, pt, de), while 14 languages cover 95% of the accept-languages (en, zh, es, ja, fr, ru, pt, de, ko, zh-TW, pl, it, nl, tr). We predict that we would expect to lose at most 19% of our traffic if we dropped L10n entirely.
    ローカリゼーションのサポートを削除または削減した場合、ユーザーの重大ではあるが管理可能な損失が発生する可能性があります。 8つの言語（en、zh、es、ja、fr、ru、pt、de）が MDN ユーザーから受信した accept-language ヘッダーの 90% をカバーし、14の言語（en、zh、es、ja、fr、ru、pt、de、ko、zh-TW、pl、it、nl、tr）が accept-languagesの 95% をカバーします。 L10n を完全に削除した場合、トラフィックの最大 19% が失われると予測されます。

    Machine translations are an acceptable solution in most cases, if not a perfect one. We looked at the quality of translations provided by automated solutions such as Google Translate and got some community members to compare these translations to manual translations. The machine translations were imperfect, and sometimes hard to understand, but many people commented that a non-perfect language that is up-to-date is better than a perfect language that is out-of-date. We appreciate that some languages (such as CJK languages) fare less well than others with automated translations.
    完全ではないにしても、ほとんどの場合、機械翻訳は許容できるソリューションです。 Google 翻訳などの自動化されたソリューションによって提供される翻訳の品質を調べ、一部のコミュニティメンバーにこれらの翻訳を手動翻訳と比較してもらいました。機械翻訳は不完全で、理解しにくいこともありましたが、多くの人が、最新の不完全な言語は、古くなった完全な言語よりも優れているとコメントしました。 一部の言語（CJK 言語など）は、自動翻訳を使用する他の言語よりもうまく機能しないことを理解しています。

So what did we decide? With the initial release of the new platform, we are planning to include all translations of all of the current documents, but in a frozen state. Translations will exist in their own mdn/translated-content repository, to which we will not accept any pull requests. The translations will be shown with a special header that says “This is an archived translation. No more edits are being accepted.” This is a temporary stage until we figure out the next step.
それで、私たちは何を決めましたか？ 新しいプラットフォームの最初のリリースでは、現在のすべてのドキュメントのすべての翻訳を含める予定ですが、フリーズ状態です。 翻訳は独自の mdn/translationed-content リポジトリに存在し、プルリクエストは受け付けません。 翻訳は、「これはアーカイブされた翻訳です。 これ以上の編集は受け付けられません。」という特別なヘッダーで表示されます。 これは、次のステップを理解するまでの一時的な段階です。

Note: In addition, the text of the UI components and header menu will be in English only, going forward. They will not be translated, at least not initially.
注：さらに、UI コンポーネントとヘッダーメニューのテキストは、今後は英語のみになります。 少なくとも最初は、翻訳されません。

After the initial release, we want to work with you, the community, to figure out the best course of action to move forward with for translations. We would ideally rather not lose localized content on MDN, but we need to fix the technical problems of the past, manage it better, and ensure that the content stays up-to-date.
最初のリリース後、コミュニティであるあなたと協力して、翻訳を進めるための最善の行動方針を見つけたいと思います。 MDN でローカライズされたコンテンツを失うことは理想的ではありませんが、過去の技術的な問題を修正し、より適切に管理し、コンテンツを最新の状態に保つ必要があります。

We will be planning the next phase of MDN localization with the following guiding principles:
次の指針に従って、MDN ローカリゼーションの次のフェーズを計画します。

    We should never have outdated localized content on MDN.
    MDN に古いローカライズされたコンテンツがあってはなりません。

    Manually localizing all MDN content in a huge range of locales seems infeasible, so we should drop that approach.
    膨大な範囲のロケールですべての MDN コンテンツを手動でローカライズすることは実行不可能と思われるため、そのアプローチをやめる必要があります。

    Losing ~20% of traffic is something we should avoid, if possible.
    トラフィックの約 20% を失うことは、可能であれば避けるべきことです。

We are making no promises about deliverables or time frames yet, but we have started to think along these lines:
成果物や時間枠についてはまだ約束していませんが、次のような考え方を始めています。

    Cut down the number of locales we are handling to the top 14 locales that give us 95% of our recorded accept-language headers.
    処理するロケールの数を、記録された受け入れ言語ヘッダーの 95% を提供する上位14のロケールに削減します。

    Initially include non-editable Machine Learning-based automated translations of the “tier-1” MDN content pages (i.e. a set of the most important MDN content that excludes the vast long tail of articles that get no, or nearly no views). Ideally we’d like to use the existing manual translations to train the Machine Learning system, hopefully getting better results. This is likely to be the first thing we’ll work on in 2021.
    最初に、編集不可能な機械学習ベースの「ティア 1」MDN コンテンツページの自動翻訳を含めます（つまり、ビューがない、またはほとんど表示されない記事の膨大なロングテールを除外する最も重要な MDN コンテンツのセット）。 理想的には、既存の手動翻訳を使用して機械学習システムをトレーニングし、より良い結果が得られることを願っています。 これは、2021年に最初に取り組むことになるでしょう。

    Regularly update the automated translations as the English content changes, keeping them up-to-date.
    英語のコンテンツが変更されたら、自動翻訳を定期的に更新して、最新の状態に保ちます。

    Start to offer a system whereby we allow community members to improve the automated translations with manual edits. This would require the community to ensure that articles are kept up-to-date with the English versions as they are updated.
    コミュニティメンバーが手動編集で自動翻訳を改善できるシステムの提供を開始します。 これには、コミュニティが記事が更新されたときに英語版で最新の状態に保たれるようにする必要があります。





Acknowledgements
謝辞


I’d like to thank my colleagues Schalk Neethling, Ryan Johnson, Peter Bengtsson, Rina Tambo Jensen, Hermina Condei, Melissa Thermidor, and anyone else I’ve forgotten who helped me polish this article with bits of content, feedback, reviews, edits, and more.
同僚の Schalk Neethling、Ryan Johnson、Peter Bengtsson、Rina Tambo Jensen、Hermina Condei、Melissa Thermidor、そしてこの記事を少しの内容、フィードバック、レビュー、編集で磨くのを手伝ってくれた私が忘れてしまった他の人に感謝します。




About Chris Mills
Chris Mills について

Chris Mills is a senior tech writer at Mozilla, where he writes docs and demos about open web apps, HTML/CSS/JavaScript, A11y, WebAssembly, and more. He loves tinkering around with web technologies, and gives occasional tech talks at conferences and universities. He used to work for Opera and W3C, and enjoys playing heavy metal drums and drinking good beer. He lives near Manchester, UK, with his good lady and three beautiful children.
Chris Mills は、Mozilla のシニアテクニカルライターであり、オープンWebアプリ、HTML / CSS / JavaScript、A11y、WebAssembly などに関するドキュメントとデモを執筆しています。 彼はWebテクノロジーをいじくり回すのが大好きで、会議や大学で時折技術講演を行っています。 彼は以前 Opera と W3C で働いていて、ヘビーメタルドラムを演奏したり、おいしいビールを飲んだりするのが好きです。 彼はイギリスのマンチェスターの近くに、良い女性と3人の美しい子供たちと一緒に住んでいます。

More articles by Chris Mills…
Chris Mills による他の記事…








Discover great resources for web development

Sign up for the Mozilla Developer Newsletter:
E-mail
I'm okay with Mozilla handling my info as explained in this Privacy Policy.
46 comments

    Lawrence

        So Mozilla is just giving up and hosting everything on Amazon and Microsoft clouds? Great work everyone! Apparently they won.
        それで、Mozilla は Amazon と Microsoft のクラウドですべてをあきらめてホストしているだけですか？ みなさん、お疲れ様でした！ どうやら彼らは勝った。

    October 29th, 2020 at 09:31

        Chris Mills

            FWIW, we’ve used AWS for a number of years. Did you have any feedback on the actual new platform direction?
            それはそれとして、AWS を何年も使用しています。 実際の新しいプラットフォームの方向性についてフィードバックはありましたか？

        October 29th, 2020 at 09:52

        GU

            That’s what you took from the whole article?
            それはあなたが記事全体から取ったものですか？

        October 29th, 2020 at 21:07

    Gabriel Florit

        Chris, I tried to fill out the form but it tells me “This form can only be viewed by users in the owner’s organization.”
        クリス、フォームに記入しようとしましたが、「このフォームは所有者の組織のユーザーのみが表示できます」と表示されます。

    October 29th, 2020 at 10:11

        Chris Mills

            Ooops! Think I’ve fixed it now. Can you try it again?
            おっと！ 私は今それを修正したと思います。 もう一度お試しいただけますか？

        October 29th, 2020 at 10:32

    0xjac

        Was GitLab considered (either gitlab.com, or self-hosted) before going with GitHub?
        GitHub を使用する前に、GitLab は（gitlab.com またはセルフホストのいずれかで）考慮されましたか？

        More than the cloud on which the platform is hosted, using private software like GitHub when there are great open-source alternatives seems to go against your principles, especial numbers 2 & 7.
        プラットフォームがホストされているクラウドよりも、優れたオープンソースの代替手段がある場合に GitHub などのプライベートソフトウェアを使用することは、あなたの原則、特に2と7に反するようです。

    October 29th, 2020 at 10:15

        chris jones

            I feel like that’s a good point why github and not gitlab or gitea???
            それが、gitlab や gitea ではなく github である理由の良い点だと思いますか？

            Shame the author is ignoring this one
            著者がこれを無視しているのは残念です

        November 1st, 2020 at 15:10

            Chris Mills

                I wasn’t ignoring it, merely thinking carefully about how to reply.
                私はそれを無視するのではなく、単に返信の仕方を慎重に考えていました。

                The only real answer here is that we have a very small development team, a tight timescale, and a lot of previous investment in using GitHub for our work (you’ll see that all of our existing platform, demo repos, macro system, browser compat data etc. is based in GitHub). To uproot everything and move to a different platform is simply not a viable option for us right now.
                ここでの唯一の本当の答えは、開発チームが非常に小さく、タイムスケールが厳しく、作業に GitHub を使用するための以前の投資が多いということです（既存のプラットフォーム、デモリポジトリ、マクロシステム、ブラウザー互換データなどはすべて GitHub に基づいていることがわかります）。 すべてを根こそぎにして別のプラットフォームに移動することは、今のところ私たちにとって実行可能な選択肢ではありません。

            November 2nd, 2020 at 02:12

    Baris

        Thank you for focusing accessibility and localization.
        アクセシビリティとローカリゼーションに焦点を当てていただきありがとうございます。

        It seems to me we are in the final years of worrying about l10n, NLP and ML translations are improving at a great speed.
        私たちは l10n について心配している最後の年にいるように思われ、NLP と ML の翻訳は非常に速いスピードで改善されています。

        100% agree with the notion “non-perfect language that is up-to-date is better”.
        「最新の不完全な言語の方が良い」という考えに 100% 同意します。

    October 29th, 2020 at 10:27

        Chris Mills

            Thanks for the comment Baris.
            Baris、コメントをありがとう。

        October 30th, 2020 at 10:18

    yeah

        Casual reminder that GitHub works with ICE to enable human rights abuses.
        GitHub が ICE と連携して、人権侵害を可能にすることをさりげなく思い出させてください。

    October 29th, 2020 at 12:06

    Adam Williams

        I hate to say it, since I’m generally supportive of MDN initiatives … but this is a real shame. You’re throwing away the benefits of a incredible wiki-based platform (where changes are pretty much instantaneous and any of us can make a difference!), the (actually pretty decent) WYSIWYG editor and an overall frictionless editing experience and replacing it with what, some (not even Markdown) document files in a Git repository.
        私は一般的に MDN イニシアチブを支持しているので、言いたくありません… しかし、これは本当に残念です。 あなたは信じられないほどのウィキベースのプラットフォーム（変更はほとんど瞬時に行われ、私たちの誰もが違いを生むことができます！）、（実際にはかなりまともな）WYSIWYG エディター、そして全体的な摩擦のない編集体験の利点を捨てて、Git リポジトリ内のいくつかの（Markdown でさえない）ドキュメントファイルに置き換えようとしています。

        You’ve massively increased the bar to contribute. And for what, some small minority of edits that are vandalism?
        貢献するための基準を大幅に増やしました。 そして、何のために、破壊行為である編集のいくつかの小さな少数派？

    October 29th, 2020 at 12:12

        Chris Mills

            In the post we detail a number of reasons why we are moving to a different platform, and it goes way beyond a bit of vandalism ;-)
            投稿では、別のプラットフォームに移行する理由をいくつか詳しく説明しますが、それはちょっとした破壊行為をはるかに超えています ;-)

            I am interested to see how this will change the landscape of the contributors we get. GitHub is harder to use than the Wiki, for sure, but:
            これが私たちが得る貢献者の風景をどのように変えるのか興味があります。 確かに、GitHub は Wiki よりも使いにくいですが、次のようになります。

            1. What we will lose in terms of casual edits, we will probably gain in terms of more substantial contributions. For each person I hear worrying about the former, I hear someone else saying that they will be more likely to contribute if it is in git and not in a Wiki.
            1. カジュアルな編集の点で失うものは、おそらくより実質的な貢献の点で得られるでしょう。 前者について心配していると聞いた人それぞれについて、Wiki ではなく git であると、貢献する可能性が高くなると誰かが言っているのを聞きます。

            2. You could use the GitHub UI edit button to make a simple change to a document, without needing to know any Git commands.
            2. GitHub UI 編集ボタンを使用すると、Git コマンドを知らなくても、ドキュメントに簡単な変更を加えることができます。

            3. Not many people will edit MDN that have no interrest at all in web development, and git is a very much ubiquitous web development tool. They will need to know it eventually.
            3. Web開発にまったく関心のない MDN を編集する人はそれほど多くなく、git は非常にユビキタスなWeb開発ツールです。 彼らは最終的にそれを知る必要があるでしょう。

            I think there is also some education to be done here, making sure we have clear guides on how to do certain things. And we could provide helper commands for some of the tougher stuff.
            特定のことを行う方法について明確なガイドがあることを確認するために、ここで行われるべきいくつかの教育もあると思います。 そして、いくつかの難しいものにヘルパーコマンドを提供することができます。

        October 30th, 2020 at 10:41

    robbaweba

        Thank you for the summary of MDN changes coming in the future! I’m pretty excited to experience it first-hand.
        今後の MDN の変更の概要をありがとうございます！ 私はそれを直接体験することにかなり興奮しています。

        Regarding the new (albeit small) barrier-to-entry for contributors: one suggestion that comes to mind would be adopting Github Codespaces as a way to provide a ready-to-use development environment. That way new contributors are less likely to be deterred by the setup process. If Github Codespaces is not available, then perhaps the regular VS Code “Dev Containers” might provide a similar benefit.
        寄稿者の新しい（小さいながらも）参入障壁について：頭に浮かぶ提案の1つは、すぐに使用できる開発環境を提供する方法として Github Codespaces を採用することです。 そうすれば、新しい貢献者がセットアッププロセスによって阻止される可能性が低くなります。 Github Codespaces が利用できない場合は、通常の VSCode「Dev Containers」でも同様のメリットが得られる可能性があります。

    October 29th, 2020 at 14:39

        Chris Mills

            Some good ideas here, thanks!
            ここにいくつかの良いアイデア、ありがとう！

            We are certain aiming to eventally provide useful sets of plugins to make MDN editing awesome in the most popular IDEs.
            最も人気のある IDE で MDN 編集を素晴らしいものにするために、最終的には便利なプラグインのセットを提供することを目指しています。

            I’ve not looked into GitHub codespaces, but I will do!
            GitHub Codespaces については調べていませんが、調べます。

        October 30th, 2020 at 10:44

    iamwillshepherd

        This is dope for developers. When do you expect to have issues in the repo for new docs or docs that need attention? Would contributors need to create an issue before they submit a PR?
        これは開発者にとってはドープです。 新しいドキュメントや注意が必要なドキュメントのリポジトリで問題が発生するのはいつですか。 寄稿者は PR を提出する前に問題を作成する必要がありますか？

        For non-developers, this does seem like a step back. I was under the impression that some of the best docs are produced by technical writes. Should they need to know or care about git? Seems to me this move makes their life much more difficult while also placing an unfair burden on folks living in developing countries (or America if you’re not lucky enough to have the right hue or win geography lottery).
        開発者以外の人にとって、これは一歩後退したように見えます。 最高のドキュメントのいくつかは技術的な書き込みによって作成されているという印象を受けました。 彼らは git を知っているか気にする必要がありますか？ この動きは彼らの生活をはるかに困難にすると同時に、発展途上国（または、適切な色合いを持ったり、地理的な宝くじに当選するのに十分な運がなかった場合はアメリカ）に住む人々に不公平な負担をかけているようです。

        I do hope to contribute, but I hope there are some plans to make it easier for folks using their phone. FWIW, this was written from a phone in a developing nation.
        私は貢献したいと思っていますが、人々が自分の電話を使いやすくするためのいくつかの計画があることを願っています。 それはそれとして、これは発展途上国の電話から書かれました。

    October 29th, 2020 at 14:43

        Chris Mills

            To give you some answers:
            あなたにいくつかの答えを与えるために：

            1. Issues to be fixed on existing docs will continue to be submitted here: https://github.com/mdn/sprints/issues
            1. 既存のドキュメントで修正される問題は引き続きここに送信されます：https://github.com/mdn/sprints/issues

            2. Contributors would not need to create an issue before they submit a PR.
            2. 寄稿者は、PR を提出する前に問題を作成する必要はありません。

            3. Most technical writers that I know working in this space tend to have basic git knowledge at least. But even for people that don’t, there is the GitHub UI edit button, which makes things easy.
            3. この分野で働いていることを私が知っているほとんどのテクニカルライターは、少なくとも基本的な git の知識を持っている傾向があります。 しかし、そうでない人でも、GitHub UI 編集ボタンがあります。 これにより作業が簡単になります。

            4. Contributing to MDN from a phone has always been challenging, and I can’t promise that getting this worked out is high on our priority list. But I’d love to hear you ideas.
            4. 電話から MDN に貢献することは常に困難であり、これを解決することが優先リストの上位にあるとは約束できません。 しかし、私はあなたのアイデアを聞いてみたいです。

        October 30th, 2020 at 10:49

            William

                1. I’ll review your ZenHub board later this evening (already pulled up in separate tab).
                1. 今夜遅くに ZenHub ボードを確認します（すでに別のタブに表示されています）。

                2. This is great!
                2. これは素晴らしいです！

                3. Most technical writers I know in America are very familiar with git, but I’ve learned this is something I took for granted. I do understand you nor I can do anything about it, but I did think it was worth sharing.
                3. アメリカで私が知っているほとんどのテクニカルライターは、git に非常に精通していますが、これは私が当たり前と思っていたものであることを学びました。 私はあなたを理解していて、それについて何もできませんが、共有する価値があると思いました。

                4. Maybe this would be better done in an issue. This would likely not serve me well given changes happen through git now (FWIW, I prefer git, but I still understand it’s a barrier to entry). Should I create issue in mdn/sprints?
                4. たぶんこれは問題でよりよく行われるでしょう。 現在 git を介して変更が行われていることを考えると、これはうまく機能しない可能性があります（それはそれとして、私は git を好みますが、それでも参入障壁であることは理解しています）。 mdn/sprints で問題を作成する必要がありますか？

            November 20th, 2020 at 05:17

    Aslan

        No Gitlab?
        Gitlab はありませんか？

    October 29th, 2020 at 15:12

        Peter Bengtsson

            See other replies on the same subject.
            同じ主題に関する他の返信を参照してください。

        November 3rd, 2020 at 17:14

    Philip Whitehouse

        Will attribution of existing contributions be retained across this migration?
        既存の貢献の帰属は、この移行全体で保持されますか？

    October 29th, 2020 at 18:19

        Chris Mills

            We are hoping to preserve this to some degree at least. AIUI, we don’t need to keep the entire history or every edit, but we do need to list the historical contribitors somewhere. I’d be up for working out some kind of a half way solution where we list all the contributors to each page, and the number of edits each person made.
            少なくともある程度はこれを維持したいと思っています。 私が聞いているところでは、履歴全体またはすべての編集を保持する必要はありませんが、履歴の寄稿者をどこかにリストする必要があります。 各ページへのすべての寄稿者と、各人が行った編集の数を一覧表示する、ある種の中間的な解決策を考え出すつもりです。

            What would be acceptable here, in your mind?
            あなたの心の中で、ここで何が受け入れられるでしょうか？

        October 30th, 2020 at 10:52

    Duncan Lock

        It seems like switching to a lightweigh markup language like Asciidoc (or Markdown if you have to) sooner rather than later, would help reduce both translation and contribution friction quite a bit – as well as probably making ML translation simpler?
        Asciidoc（または必要に応じて Markdown）のような軽量マークアップ言語に後でではなく早く切り替えると、翻訳と貢献の摩擦の両方が大幅に軽減され、ML 翻訳が簡単になる可能性がありますか？

    October 29th, 2020 at 20:34

        Chris Mills

            I agree. We are hoping to get to markdown at some point, as it is so ubiquitous on the web, but we may look at some kind of MDN flavor markdown, with a few extensions to make life easier
            同意します。 ウェブ上で非常に普及しているため、いつか markdown に到達することを望んでいますが、生活を楽にするためにいくつかの拡張機能を備えた、ある種の MDN フレーバー markdown を検討する可能性があります

        October 30th, 2020 at 10:53

    voracity

        I guess I have the same reservations about moving to private platforms as some of the other comments. I also find it perhaps a little unfortunate that under “Simplified back-end platform”, the new platform is actually more complex — it’s simpler from Mozilla’s perspective because of the outsourcing to 3rd parties. And I’m not trying to be critical, just clear with words. (The tech industry is getting increasingly problematic, and we need more Mozilla, so if this change helps, then it helps.)
        プライベートプラットフォームへの移行については、他のコメントと同じように予約していると思います。 また、「簡略化されたバックエンドプラットフォーム」では、新しいプラットフォームが実際にはより複雑になっていることも少し残念です。 サードパーティにアウトソーシングしているため、Mozilla の観点からはよりシンプルです。 そして、私は批判的であろうとはしていません。 言葉ではっきりさせてください。 （テクノロジー業界はますます問題を抱えており、Mozilla がもっと必要なので、この変更が役立つのであれば、それは役に立ちます。）

        “We will be using GitHub’s contribution tools and features, essentially moving MDN from a Wiki model to a pull request (PR) model. This is so much better for contribution, allowing for intelligent linting, mass edits, and inclusion of MDN docs in whatever workflows you want to add it to (you can edit MDN source files directly in your favorite code editor).”
        「私たちは GitHub のコントリビューションツールと機能を使用し、基本的に MDN を Wiki モデルからプルリクエスト（PR）モデルに移行します。 これは貢献にとって非常に優れており、インテリジェントなリンティング、一括編集、および追加するワークフローに MDN ドキュメントを含めることができます（MDN ソースファイルはお気に入りのコードエディターで直接編集できます）。」

        I suspect Wikipedia (and StackOverflow, actually) succeeded because it *didn’t* have a traditional review system. Traditional review systems are slow, overly conservative, seriously biased and inflexible. The incentive to fix an incorrect public claim is *much* greater than the incentive to check an effectively private review queue. You make it sound as if there is no trade-off.
        ウィキペディア（そして実際には StackOverflow）は、従来のレビューシステムが*なかった*ため、成功したと思います。 従来のレビューシステムは遅く、過度に保守的で、深刻な偏見があり、柔軟性がありません。 誤った公的主張を修正するインセンティブは、効果的にプライベートなレビューキューをチェックするインセンティブよりも*はるかに*大きいです。 トレードオフがないかのように聞こえるようにします。

        MDN is easily the most valuable and reliable web developer resource by a large margin (not counting Q/A resources like SO) and I wish it well on the new platform.
        MDNは、（SO のような Q/A リソースを除いて）大きな差で簡単に最も価値があり信頼できるWeb開発者リソースであり、新しいプラットフォームでうまくいくことを願っています。

    October 30th, 2020 at 05:48

        Chris Mills

            Thanks for your comments. They are measured, fair, and good food for thought. When we say simplified, we mean that the previous platform is very difficult to maintain, and we feel that the proposed changes are necessary to allow us to make good updates in the future, and get contributors on board.
            コメントしてくれてありがとう。 それらは測定され、公正で、思考に適した食べ物です。 簡略化とは、以前のプラットフォームを維持するのが非常に難しいことを意味し、提案された変更は、将来的に適切な更新を行い、貢献者を参加させるために必要であると感じています。

            The review queue will be completely public , and we are hoping to get a solid, stable community on board.
            レビューキューは完全に公開され、堅実で安定したコミュニティが参加することを望んでいます。

        October 30th, 2020 at 10:56

    Rami Yushuvaev

        Awesome news! It’s going to be easier to contribute with GIT and the GitHub web interface. But you should prepare the have thousands and maybe tens of thousands issues and PRs.
        素晴らしいニュース！ GIT と GitHub Webインターフェースで貢献するのが簡単になります。 ただし、数千、場合によっては数万の問題と PR を準備する必要があります。


        Chris, are you going to import the docs again on November 2nd? Where should I contribute? and when should I stop using the current platform?
         Chris、11月2日にもう一度ドキュメントをインポートしますか？ どこに貢献すればいいですか？ 現在のプラットフォームの使用をいつ停止する必要がありますか？

    October 30th, 2020 at 08:56

        Chris Mills

            Thanks Rami! We are certainly going to need a robust process for managing the content reviews, yes. We currently get about 300-400 per day in the wiki model, so it will be interesting to see how that changes.
            Rami ありがとう！ はい、コンテンツレビューを管理するための堅牢なプロセスが確かに必要になります。 現在、ウィキモデルでは1日あたり約300〜400を取得しているため、それがどのように変化するかを見るのは興味深いことです。

            Yes, we will import the docs so they are up-to-date in the content repo when the beta launches. When the launch happens, people can feel free to keep editing the wiki, but we’ll also expect people to test the new content repo out. Changes merged there will also be replicated in the wiki, so they don’t get out of sync.
             はい。 ベータ版のリリース時にコンテンツリポジトリで最新の状態になるように、ドキュメントをインポートします。 リリースが行われると、人々はウィキを編集し続けることができますが、新しいコンテンツリポジトリをテストすることも期待されます。 そこでマージされた変更はウィキにも複製されるため、同期が外れることはありません。

        October 30th, 2020 at 10:59

    Guillaume Grossetie

        Awesome news!
        素晴らしいニュース！

        I’m really excited about this change and I think it’s a step in the right direction.
        私はこの変化に本当に興奮しており、正しい方向への一歩だと思います。

        > we are talking about converting the content to markdown eventually, but that is a bit of a ways off
        > 最終的にコンテンツを markdown に変換することについて話しているが、それは少し離れている

        As you said, it’s probably too soon to discuss this but I would suggest to consider AsciiDoc which has an extensible syntax. I’m pretty sure it could fit MDN specific needs :)
         あなたが言ったように、これについて議論するのはおそらく時期尚早ですが、拡張可能な構文を持つ AsciiDoc を検討することをお勧めします。 MDN 固有のニーズに合うと確信しています:)

    October 30th, 2020 at 11:08

        Peter Bengtsson

            (Yari developer here)
            （Yari 開発者はこちら）

            Thanks for the suggestion!
            提案をありがとう！

            One of compelling reasons for Markdown is that there are mature tooling that works well with what we have to migrate. I.e. our macro-filled HTML.
            Markdown の説得力のある理由の1つは、移行する必要のあるものとうまく機能する成熟したツールがあることです。 つまり マクロで埋められた HTML。

            It’s quite possibly that AsciiDoc is as good or even better but we have take ALL variables into account, especially tooling which has many tentacles.
             AsciiDoc が同等かそれ以上である可能性は十分にありますが、すべての変数、特に多くの触手を持つツールを考慮に入れています。

        November 2nd, 2020 at 05:27

    azu

        > We appreciate that some languages (such as CJK languages) fare less well than others with automated translations.
        > 一部の言語（CJK 言語など）は、自動翻訳を使用する他の言語よりもうまく機能しないことを理解しています。

        In my experince, machine translation cause errors in some langualages.
        私の経験では、機械翻訳はいくつかの言語でエラーを引き起こします。

        For example, Microsoft’s documentation have used machine translation and it causes many errors.
        たとえば、Microsoft のドキュメントでは機械翻訳が使用されており、多くのエラーが発生します。

        – https://github.com/dotnet/docs.ja-jp/issues/118
        – https://stackoverflow.com/questions/5274463/how-to-set-msdn-to-be-always-in-english

        :memo: Microsoft’s documentation accept a feedback for fixing these issues.
        ：memo：Microsoft のドキュメントは、これらの問題を修正するためのフィードバックを受け入れます。

        If search engine results like Google show tranlated MDN that is machine translated , I will feel that it is spam-like site.
         グーグルのような検索エンジンの結果が機械翻訳された翻訳済み MDN を表示する場合、それはスパムのようなサイトであると感じます。

        Similar problems was caused in stackoverflow.
         同様の問題が stackoverflow で発生しました。

        – https://ja.meta.stackoverflow.com/questions/2905/stack-overflow%E3%81%AE%E8%8B%B1%E8%AA%9E%E3%81%8B%E3%82%89%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AB%E6%A9%9F%E6%A2%B0%E7%BF%BB%E8%A8%B3%E3%81%95%E3%82%8C%E3%81%9F%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%AE%E3%82%B5%E3%82%A4%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%A9%E3%81%86%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99%E3%81%8B
        – https://ru.meta.stackoverflow.com/questions/8371/%d0%9d%d1%83%d0%b6%d0%bd%d1%8b-%d0%bb%d0%b8-%d0%bf%d0%b5%d1%80%d0%b5%d0%b2%d0%be%d0%b4%d1%8b-%d0%bd%d0%b0-stack-overflow-%d0%95%d1%81%d0%bb%d0%b8-%d0%b4%d0%b0-%d0%ba%d0%b0%d0%ba%d0%be%d0%b9-%d0%b2%d1%8b-%d0%b2%d0%b8%d0%b4%d0%b8%d1%82%d0%b5-%d1%81%d0%b8%d1%81%d1%82%d0%b5%d0%bc%d1%83

        I feel that non-editable Machine Learning-based automated translations is harmful.
        編集不可能な機械学習ベースの自動翻訳は有害だと感じています。

        So, I wish that the user can choose original document in english without accept-language headers.
        したがって、ユーザーが受け入れ言語ヘッダーなしで英語の元のドキュメントを選択できることを望みます。

        If you have choosed english, mdn should redirect to english page next time. (This state should be stored in storage like cookie)
        英語を選択した場合、mdn は次回英語のページにリダイレクトする必要があります。 （この状態は Cookie などのストレージに保存する必要があります）

        Probably, this user not want to see machine translated page.
        おそらく、このユーザーは機械翻訳されたページを見たくないでしょう。

    October 30th, 2020 at 20:23

    Outvi V

        MDN has been a useful resource for web developers, and we are happy to see the improvement on this. GitHub is a good place for developers to contribute and get recognized, so moving the editing process to GitHub might ease the editing process (especially after it moves to a GitHub-Web-UI-previewable format, e.g. Markdown), and encourage users to contribute.
        MDN はWeb開発者にとって有用なリソースであり、これが改善されたことを嬉しく思います。 GitHub は開発者が貢献して認識されるのに適した場所であるため、編集プロセスを GitHub に移行すると、編集プロセスが簡単になり（特に、Markdown などの GitHub-Web-UI プレビュー可能な形式に移行した後）、ユーザーに貢献を促すことができます。


        What is problematic for the readers is the availability of MDN. As we all see, GitHub is a company in the US and blocks developers in certain areas if the US government asks them to, and thus is by no means “open and accessible” as described in the Manifesto. Will MDN, as a 501(c)(3) in the US, be forced to cut the access of some developers according to the goverment order? Mozilla says it’s “non-compromised”, but depending on a infra like GitHub is obviously a step to “non-non-compromised”.
        読者にとって問題なのは、MDN の可用性です。 ご覧のとおり、GitHub は米国の企業であり、米国政府から要求された場合、特定の領域の開発者をブロックします。 したがって、マニフェストに記載されているように、決して「オープンでアクセス可能」ではありません。 MDN は、米国の 501(c)(3) として、政府の命令に従って一部の開発者のアクセスを制限することを余儀なくされますか？ Mozilla はそれが「妥協していない」と言っていますが、GitHub のようなインフラに依存することは、明らかに「妥協している」への一歩です。

    October 30th, 2020 at 20:41

        Peter Bengtsson

            > What is problematic for the readers is the availability of MDN.
            > 読者にとって問題なのは、MDN の可用性です。

            Readers won’t be using GitHub and if GitHub was to go down, it wouldn’t affect readers at all. Where they would notice is if they scroll to the bottom and click the “Report a problem…” link which will require that the reporter has a GitHub account (to file a new issue).
             読者は GitHub を使用しません。 また、GitHub がダウンしても、読者にはまったく影響しません。 一番下までスクロールして[問題の報告…]リンクをクリックすると、レポーターが GitHub アカウントを持っている必要があります（新しい問題を報告するため）。

            In terms of READING MDN, and its availability, is backed by AWS.
             MDN の読み取りとその可用性に関しては、AWS がサポートしています。

        November 2nd, 2020 at 06:45

    Jesper

        As a non-native English speaker who would theoretically appreciate localized text but can nonetheless read English, please:
        理論的にはローカライズされたテキストを高く評価するが、それでも英語を読むことができる英語を母国語としない人として、次のことを行ってください。

        Plainly and unmistakably mark machine translations as such. If possible, allow showing paragraph-by-paragraph, side-by-side comparisons. Allow clicking one button to set a preference cookie or similar to switch to a mode where you will always see the original version of the text – and allow reverting it just as quickly.
        機械翻訳をそのようにはっきりと間違いなくマークします。 可能であれば、段落ごと、並べて比較を表示できるようにします。 ボタンを1つクリックして、設定 Cookie などを設定し、テキストの元のバージョンが常に表示されるモードに切り替えて、同じようにすばやく元に戻すことができます。

        If the meaning of the shift from manual translation towards machine translation is to value and maintain accuracy and relevancy, the capacity of machine translation as the de facto single translator to be accurate and relevant is a gnarly issue.
        手動翻訳から機械翻訳への移行の意味が、正確さと関連性を評価して維持することである場合、事実上の単一の翻訳者としての機械翻訳の正確で関連性のある能力は厄介な問題です。

        In my experience across MDN-like sites that have tried them, machine translations are serviceable *at best*, with a large and constant risk of misunderstandings, including loss of nuance and subtlety, but also including outright malinformation where syntax, commands or intent are completely distorted. At worst, those sites would also insist on automatically redirecting from the English version to the poorer quality machine translation. Even if the capabilities were near perfect and trained especially for the domain at hand, it would still come with undesirable aspects, and it is statistically infeasible for machine translations to maintain an acceptable level of quality across a body of work the size and breadth of MDN.
        それらを試した MDN のようなサイト全体での私の経験では、機械翻訳は*せいぜい*サービス可能であり、ニュアンスや微妙さの喪失などの誤解のリスクが大きく、常にありますが、構文、コマンド、または意図が完全に歪んでいます。 最悪の場合、これらのサイトは、英語版から低品質の機械翻訳に自動的にリダイレクトすることも要求します。 機能がほぼ完璧で、特に目前のドメイン向けにトレーニングされていたとしても、それでも望ましくない側面があり、機械翻訳が MDN のサイズと幅の作業全体で許容可能なレベルの品質を維持することは統計的に実行不可能です。

        That said, the point about allowing the material to be accessible to the majority of people in the world who simply are not fluent enough in the original language to meaningfully absorb the information is undeniable and important. MDN is the de facto authority on its subjects and has to anticipate the needs of many audiences. I hope the way forward is decided in careful dialogue with speakers of many languages and in a way that allows everyone’s preferences to be met.
        とはいえ、情報を有意義に吸収するのに十分な原語に堪能ではない世界中の大多数の人々が資料にアクセスできるようにすることについてのポイントは否定できず、重要です。 MDN はその主題に関する事実上の権威であり、多くの聴衆のニーズを予測する必要があります。 多くの言語の話者と慎重に対話し、すべての人の好みに合うように、今後の方向性が決定されることを願っています。

    October 30th, 2020 at 22:16

        Peter Bengtsson

            (Yari developer here)
            （Yari 開発者はこちら）

            Thanks for the suggestion about “marking” the machine translated text explicitly. I think that’s a great suggestion. If a user used Google Translate themselves, on an English page, they wouldn’t need this because they’re very aware what they just did 1 minute ago.
            機械翻訳されたテキストを明示的に「マーク」することについての提案に感謝します。 それは素晴らしい提案だと思います。 ユーザーが英語のページで自分で Google 翻訳を使用した場合、1分前に何をしたかをよく知っているので、これは必要ありません。

            I think the state of translations in MDN would be extremely different if MDN was a blog and each article was a published-in-time thing that generally doesn’t organically mutate. But it adds an enormous amount of complexity if the original keeps getting changed.
             MDN がブログであり、各記事が一般的に有機的に変化しない時間内に公開されたものである場合、MDN の翻訳の状態は非常に異なると思います。 しかし、オリジナルが変更され続けると、非常に複雑になります。

            We have done a lot of thinking and we’re still thinking about all the issues around localization. It’s not easy. But first we have to focus on launching the new platform. Please stay with us and help out.
             私たちは多くのことを考えてきましたが、ローカリゼーションに関するすべての問題についてまだ考えています。 簡単ではない。 ただし、最初に、新しいプラットフォームの立ち上げに焦点を当てる必要があります。 私たちと一緒にいて、助けてください。

        November 2nd, 2020 at 05:43

    Max

        If I recall it right, Mozilla just fired the MDN Web Docs team a few months ago. Will it affect the migration?
        私がそれを正しく思い出せば、Mozilla は数ヶ月前に MDN Web Docs チームを解雇したばかりです。 移行に影響しますか？

    October 31st, 2020 at 04:01

        Chris Mills

            The entire team did not get laid off. The MDN developer team had a small reduction in capacity, and the MDN writers’ team had a significant reduction in capacity, but we are moving forward with a new strategy, and both the platform and content work is proceeding.
            チーム全体が解雇されませんでした。 MDN 開発者チームでは容量がわずかに減少し、MDN ライターチームでは容量が大幅に減少しましたが、新しい戦略を進めており、プラットフォームとコンテンツの両方の作業が進行中です。

        October 31st, 2020 at 04:35

        Peter Bengtsson

            (Yari developer here)
            （Yari 開発者はこちら）

            It’s true, as Chris pointed out in his reply.
            Chris が彼の返事で指摘したように、それは本当です。

            That’s why we need more help for you. And you and you. Everyone who loves good documentation, please come and help out! Together we improve MDN.
            だからこそ、私たちはあなたのためにもっと助けが必要です。 そしてあなたとあなた。 良いドキュメンテーションを愛するすべての人は、来て助けてください！ 一緒に MDN を改善します。

        November 2nd, 2020 at 05:30

            Peter Bengtsson

                “That’s why we need more help FROM you.”
                「だからこそ、私たちはあなたからもっと助けが必要です。」

                Not “for you”. Sorry.
                「あなたのために」ではない。 ごめんなさい。

            November 2nd, 2020 at 06:42

    Young

        If the published articles link to the original doc files in the Github repo, it would make navigating inside and contributing to the unfamiliar repo less daunting.
        公開された記事が Github リポジトリ内の元のドキュメントファイルにリンクしている場合、内部をナビゲートし、見慣れないリポジトリに貢献することはそれほど困難ではありません。

        Thanks for all the work your team is doing in this challenging time.
        あなたのチームがこの困難な時期に行っているすべての仕事に感謝します。

    November 3rd, 2020 at 09:44

        Chris Mills

            It is really interesting to hear you say that. We are already looking at adding a feature that will create a section at the bottom of each MDN article saying something like “spotted a problem on this page? File an issue or go and fix it yourself — here’s a link to the page source”. Is that the kind of thing you are talking about?
            あなたがそう言うのを聞くのは本当に面白いです。 各 MDN 記事の下部に、「このページで問題を見つけましたか？ 問題を提出するか、自分で問題を修正してください。 ここにページソースへのリンクがあります。」のようなセクションを作成する機能の追加をすでに検討しています。 それはあなたが話しているようなことですか？

        November 3rd, 2020 at 10:09

    Dennis

        How does your implementation differs from Microsoft one?
        実装は Microsoft のものとどのように異なりますか？

        They already have whole documentation hosted in github even with comments on their site, PR details and more.
        彼らはすでに、サイトへのコメントや PR の詳細などを含め、ドキュメント全体を github でホストしています。

    November 5th, 2020 at 11:26

    Tom VanAntwerp

        This sounds really awesome! It makes a lot of sense both in reducing technical overhead and improving the quality of submissions by routing everything through a PR process.
        これは本当に素晴らしいですね！ PR プロセスを通じてすべてをルーティングすることにより、技術的なオーバーヘッドを削減し、提出の品質を向上させることの両方において、それは非常に理にかなっています。


        With earlier layoffs at Mozilla, I was worried about what could happen to MDN. But with all content in a GitHub repo, I’ll be much more confident that it remains open and available to anyone who needs it.
        Mozilla での以前の一時解雇で、私は MDN に何が起こるかについて心配していました。 ただし、GitHub リポジトリにすべてのコンテンツが含まれているため、GitHub リポジトリが開いたままで、必要な人なら誰でも利用できると確信しています。

    November 6th, 2020 at 09:23

    Zac Svoboda

        MDN is, an continues to be, the best resource and reference for web development! I love sharing it with people and hope that this change improves the platform.
        MDN は、これからもWeb開発のための最高のリソースおよびリファレンスです。 私はそれを人々と共有するのが大好きで、この変更がプラットフォームを改善することを願っています。

        I see a lot of criticism in this discussion here and, while I think many of the comments come from a place a love, I want to encourage looking also at what’s being gained here rather than only what is lost. Utilizing existing products to lower the maintenance burden for the MDN team can be a huge win. These are talented folks and they should be given the opportunity to tackle the tough problems. Building an advanced i18n strategy will be a big draw and enhance this community greatly!
         ここでの議論には多くの批判があります。 コメントの多くは愛の場所からのものだと思いますが、失われたものだけでなく、ここで得られたものも見てみることをお勧めします。 既存の製品を利用して MDN チームのメンテナンスの負担を軽減することは、大きなメリットになります。 これらは才能のある人々であり、彼らは困難な問題に取り組む機会を与えられるべきです。 高度な i18n 戦略を構築することは大きな魅力であり、このコミュニティを大幅に強化します。

    November 8th, 2020 at 14:44

    xty

        Good job !
        よくやった ！

        if every section have a translate button will helpful.
        すべてのセクションに翻訳ボタンがある場合に役立ちます。

        reader can translate any section he want and should can toggle to english to contrast.
        読者は好きなセクションを翻訳でき、対照的に英語に切り替えることができます。

    November 11th, 2020 at 17:18

    Henry

        I hope MDN adopts ISO 639-3 tags instead of 639-1 tags for the Chinese languages (i.e. following BCP-47). Supporting only “zh-CN”/”zh-TW” for Chinese on MDN means that non-Mandarin users cannot contribute documentation written in their native language.
        MDN が中国語の 639-1 タグの代わりに ISO 639-3 タグを採用することを願っています（つまり、BCP-47 に準拠しています）。 MDN で中国語の「zh-CN」/「zh-TW」のみをサポートするということは、マンダリン以外のユーザーが母国語で書かれたドキュメントを提供できないことを意味します。

    November 17th, 2020 at 17:38

Comments are closed for this article.
この記事へのコメントは締め切らせていただきました。

Except where otherwise noted, content on this site is licensed under the Creative Commons Attribution Share-Alike License v3.0 or any later version.
the Mozilla dino logo
